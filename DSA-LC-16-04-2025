Question: Count the number of good subarrays.

Given an integer array nums and an integer k, return the number of good subarrays of nums.

A subarray arr is good if there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j].

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1,1,1], k = 10
Output: 1
Explanation: The only good subarray is the array nums itself.
Example 2:

Input: nums = [3,1,4,3,2,2,4], k = 2
Output: 4
Explanation: There are 4 different good subarrays:
- [3,1,4,3,2,2] that has 2 pairs.
- [3,1,4,3,2,2,4] that has 3 pairs.
- [1,4,3,2,2,4] that has 2 pairs.
- [4,3,2,2,4] that has 2 pairs.
 

Constraints:

1 <= nums.length <= 10^5
1 <= nums[i], k <= 10^9



Code:

long long countGood(vector<int>& nums, int k) {

        int n= nums.size();

        int i=0, j=0;
        long long res=0;
        int pairs = 0;
        unordered_map<int,int>um;

        while(j<n)
        {
            if(um[nums[j]])
            {
                pairs += um[nums[j]];
            }
            if(pairs >= k)
            {
                res += n-j;
            }
            um[nums[j]]++;

            while(pairs >= k && i<j)
            {
                um[nums[i]]--;
                pairs -= um[nums[i]];
                if(pairs >= k)
                {
                    res += n-j;
                }
                i++;
            }
            
            j++;
        }
        
      return res;

    }