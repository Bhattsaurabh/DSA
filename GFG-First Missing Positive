Question: First Missing Positive.


Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.

You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.

 

Example 1:

Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.
 

Constraints:

1 <= nums.length <= 10^5
-2^31 <= nums[i] <= 2^31 - 1

Code:

int firstMissingPositive(vector<int>& nums) {
        
         int n = nums.size();
        
        bool contain1=false;
        
        // agar 1 present nhi hoga toh 1 return krenge
        // aor sare -ve or greater than N ko 1 se mark krdenge

        for(int i=0 ;i<n ;i++)
        {
            if(nums[i] == 1)
             {
                 contain1 = true;
             }
             
             if(nums[i] <= 0 || nums[i] > n)
              nums[i] = 1;
        }
        
        if(contain1 == false)
          return 1;
          
        for(int i=0 ;i<n ;i++)
        {
            int idx = abs(nums[i]);

            if(nums[idx-1] > 0)                      
             nums[idx-1] = -nums[idx-1];            //mark the element which is present as -ve
        }
        
        for(int i=0 ;i<n;i++)
        {
            if(nums[i] > 0)           // agr koi +ve mila matlab wo present ni tha uska index+1 return
             return i+1;
        }
        

        // agar sb present 1 se N tak then N+1 return 

        return n+1;


    }
