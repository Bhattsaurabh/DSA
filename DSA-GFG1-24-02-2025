Question: Construct binary tree from inorder and preorder traversal.

Given two arrays representing the inorder and preorder traversals of a binary tree, construct the tree and return the root node of the constructed tree.

Note: The output is written in postorder traversal.

Examples:

Input: inorder[] = [1, 6, 8, 7], preorder[] = [1, 6, 7, 8]
Output: [8, 7, 6, 1]
Explanation: The tree will look like

Input: inorder[] = [3, 1, 4, 0, 2, 5], preorder[] = [0, 1, 3, 4, 2, 5]
Output: [3, 4, 1, 5, 2, 0]
Explanation: The tree will look like

Input: inorder[] = [2, 5, 4, 1, 3], preorder[] = [1, 4, 5, 2, 3]
Output: [2, 5, 4, 3, 1]
Explanation: The tree will look like

Constraints:
1 ≤ number of nodes ≤ 103
0 ≤ nodes -> data ≤ 103
Both the inorder and preorder arrays contain unique values.


Code:

Node* solve(vector<int>&inorder, vector<int>&preorder, int& idx, int inStartidx, int inEndidx)
    {
        if(idx >= preorder.size() || inStartidx > inEndidx)
         return NULL;
         
        int ele = preorder[idx];
        Node* root = new Node(ele);
        
        idx++;
        int j=0;
        while(inorder[j] != ele)
         {
             j++;
         }
        
        root->left = solve(inorder, preorder, idx, inStartidx, j-1);
        root->right = solve(inorder, preorder, idx, j+1, inEndidx);
        
        
        return root;
        
    }
  
    // Function to build the tree from given inorder and preorder traversals
    Node *buildTree(vector<int> &inorder, vector<int> &preorder) {
        
        int n = inorder.size();
        int preorderidx = 0;
        
        return solve(inorder, preorder, preorderidx, 0, n-1);
    }