Question: Trapping Rain water.

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 10^5


Code: 

int trap(vector<int>& height) {

    int n = height.size();
    vector<int>prefixMax(n, 0);
    vector<int>suffixMax(n, 0);

    for(int i=0 ;i<n;i++)
    {
        if(i == 0)
         prefixMax[i] = height[i];
        else{
            prefixMax[i] = max(prefixMax[i-1], height[i]);
        }
    }
    for(int i=n-1 ;i>=0;i--)
    {
        if(i == n-1)
         suffixMax[i] = height[i];
        else{
            suffixMax[i] = max(suffixMax[i+1], height[i]);
        }
    }

    int total=0;

    for(int i=0 ;i<n;i++)
    {
        if(height[i] < prefixMax[i] && height[i] < suffixMax[i])
            total += min(prefixMax[i], suffixMax[i]) - height[i];
    }

    return total;
    
    
}