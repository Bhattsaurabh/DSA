Question: Count number of complete components.


You are given an integer n. There is an undirected graph with n vertices, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting vertices ai and bi.

Return the number of complete connected components of the graph.

A connected component is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph.

A connected component is said to be complete if there exists an edge between every pair of its vertices.

 

Example 1:



Input: n = 6, edges = [[0,1],[0,2],[1,2],[3,4]]
Output: 3
Explanation: From the picture above, one can see that all of the components of this graph are complete.
Example 2:



Input: n = 6, edges = [[0,1],[0,2],[1,2],[3,4],[3,5]]
Output: 1
Explanation: The component containing vertices 0, 1, and 2 is complete since there is an edge between every pair of two vertices. On the other hand, the component containing vertices 3, 4, and 5 is not complete since there is no edge between vertices 4 and 5. Thus, the number of complete components in this graph is 1.
 

Constraints:

1 <= n <= 50
0 <= edges.length <= n * (n - 1) / 2
edges[i].length == 2
0 <= ai, bi <= n - 1
ai != bi
There are no repeated edges.

Code:

void dfs(int i, vector<int>&vis, unordered_map<int,vector<int>>&um, int& e, int& v)
    {
        vis[i] = 1;
        v++;
        e += um[i].size();

        for(auto& ngbr: um[i])
        {
            if(vis[ngbr])
             continue;
            
            dfs(ngbr, vis, um, e,v);
        }
    }

    void bfs(int i, vector<int>&vis, unordered_map<int,vector<int>>&um, int& e, int& v)
    {
        queue<int>q;
        q.push(i);
        vis[i] = 1;

        while(!q.empty())
        {
            int node = q.front();
            q.pop();
            v++;
            e += um[node].size();

            for(auto& ngbr: um[node])
            {
                if(vis[ngbr])
                    continue;
                
                vis[ngbr] = 1;
                q.push(ngbr);

            }

        }
    }

    int countCompleteComponents(int n, vector<vector<int>>& edges) {

        unordered_map<int,vector<int>>um;

        for(auto& edge: edges)
        {
            um[edge[0]].push_back(edge[1]);
            um[edge[1]].push_back(edge[0]);
        }

        vector<int>vis(n, 0);
        int ans=0;

        for(int i=0; i<n;i++)
        {
            if(vis[i] == 1)
                continue;

            int e=0,v=0;

            bfs(i, vis, um, e, v);

            if(v*(v-1)/2 == e/2)
             ans++;

        }    

    return ans;
        
    }
