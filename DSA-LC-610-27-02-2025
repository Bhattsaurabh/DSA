Question: Length of longest fibonacci subsequence.

A sequence x1, x2, ..., xn is Fibonacci-like if:

n >= 3
xi + xi+1 == xi+2 for all i + 2 <= n
Given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.

A subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].

 

Example 1:

Input: arr = [1,2,3,4,5,6,7,8]
Output: 5
Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].
Example 2:

Input: arr = [1,3,7,11,12,14,18]
Output: 3
Explanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].
 

Constraints:

3 <= arr.length <= 1000
1 <= arr[i] < arr[i + 1] <= 10^9

Code: 



    int solve(int j, int k, vector<int>& arr,  unordered_map<int,int> &um, vector<vector<int>>&dp)
    {
        if(dp[j][k] != -1)
         return dp[j][k];

        int target = arr[k]-arr[j];

        if(um.count(target) && um[target] < j)
        {
            int i = um[target];
            return dp[j][k] =  1 + solve(i, j, arr, um, dp);
            
        }
       
        return  dp[j][k] = 2;
    }

    int tabulation(vector<int>& arr,  unordered_map<int,int> &um, vector<vector<int>>&dp)
    {
        int n = arr.size();
        int ans = 0;
        for(int j=1;j<n;j++)
        {
            for(int k=j+1 ;k<n;k++)
            {
                int target = arr[k] - arr[j];
                if(um.count(target) && um[target] < j)
                {
                    int i = um[target];
                   dp[j][k] = 1 + dp[i][j];
                }
                 ans = max(ans, dp[j][k]);
            }
        }


        return ans >=3 ? ans : 0;  

    }

    int lenLongestFibSubseq(vector<int>& arr) {

        int n = arr.size();
        int ans=0;
        unordered_map<int,int>um;
        vector<vector<int>>dp(n, vector<int>(n, 2));       

        for(int i=0;i<n;i++)
        {
            um[arr[i]] = i;
        }

        return tabulation(arr, um, dp);

        for(int j=1;j<n;j++)
        {
            for(int k=j+1 ;k<n;k++)
            {
                int length  = solve(j,k, arr, um, dp);
                if(length >= 3)
                 ans =  max(ans, length);
            }
        }


        return ans;        
    }