Question: Split Array Largest Sum.

Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 106
1 <= k <= min(50, nums.length)

Code:


int solve(vector<int>& nums, int maxSum)
{
    int n = nums.size();
    int currsum = 0;
    int split = 1;

    for(int i=0 ;i<n ;i++)
    {
        if(currsum + nums[i] <= maxSum)
        {
            currsum += nums[i];
        }
        else{
            split++;
            currsum = nums[i];
        }
    }
   
 return split;
}

int splitArray(vector<int>& nums, int k) {
  
  int low = *max_element(nums.begin(), nums.end());
  int high  = accumulate(begin(nums), end(nums), 0);

  int ans = INT_MAX;
  
  while(low <= high)
  {
     int mid = (low+high)/2;
     int split = solve(nums, mid);

     if(split > k)
      low = mid+1;
     else
      high = mid-1;
  }

return low;
    
}