Question: Longest Substring with Atleast K repeating characters.


Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.

if no such substring exists, return 0.

 

Example 1:

Input: s = "aaabb", k = 3
Output: 3
Explanation: The longest substring is "aaa", as 'a' is repeated 3 times.
Example 2:

Input: s = "ababbc", k = 2
Output: 5
Explanation: The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.
 

Constraints:

1 <= s.length <= 104
s consists of only lowercase English letters.
1 <= k <= 10^5


Code:

 // APPROACH: DIVIDE AND CONQUER

    int longestSubstring(string s, int k) {

       int n = s.size();

        if(n < k)
          return 0;
        if(k <= 1)
         return n; 

       unordered_map<char, int>um;

        for(auto ch: s)
        {
            um[ch]++;
        }

        int ans=0;
        int i=0;
       
        while(i<n && um[s[i]] >= k) i++;

        if(i >= n)
          return i;

        int Ls1 = longestSubstring(s.substr(0, i), k);

        while(i<n && um[s[i]] < k) i++;

        int Ls2 = (i<n) ? longestSubstring(s.substr(i), k) : 0;
        

        return max(Ls1, Ls2);

    }