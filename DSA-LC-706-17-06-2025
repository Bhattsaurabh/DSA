Question: Count the number of arrays with K Matching adjacent elements.

You are given three integers n, m, k. A good array arr of size n is defined as follows:

Each element in arr is in the inclusive range [1, m].
Exactly k indices i (where 1 <= i < n) satisfy the condition arr[i - 1] == arr[i].
Return the number of good arrays that can be formed.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 3, m = 2, k = 1

Output: 4

Explanation:

There are 4 good arrays. They are [1, 1, 2], [1, 2, 2], [2, 1, 1] and [2, 2, 1].
Hence, the answer is 4.
Example 2:

Input: n = 4, m = 2, k = 2

Output: 6

Explanation:

The good arrays are [1, 1, 1, 2], [1, 1, 2, 2], [1, 2, 2, 2], [2, 1, 1, 1], [2, 2, 1, 1] and [2, 2, 2, 1].
Hence, the answer is 6.
Example 3:

Input: n = 5, m = 2, k = 0

Output: 2

Explanation:

The good arrays are [1, 2, 1, 2, 1] and [2, 1, 2, 1, 2]. Hence, the answer is 2.
 

Constraints:

1 <= n <= 105
1 <= m <= 105
0 <= k <= n - 1


Code:

    int MOD = 1e9+7;

    long long power(long long a, long long b) {
        if (b == 0)
            return 1;

        long long half = power(a, b / 2);

        long long res = (half * half) % MOD;

        if (b % 2 != 0) {
            res = (res * a) % MOD;
        }

        return res;
    }

    long long Ncr(int n, int r, vector<long long>&factorial, vector<long long>&fermatFact)
    {
       // n-1cr =  (n-1)!/r!*(n-1-r)!

        return factorial[n] * fermatFact[n-r] % MOD * fermatFact[r] % MOD;
    }

    int countGoodArrays(int n, int m, int k) {

        vector<long long>factorial(n+1, 1);
        for(int i=1 ;i<=n;i++)
        {
            factorial[i] =  (factorial[i-1] * i)%MOD; 
        }

        // Inverse Factorial preCalculate fermat little theorem => y!/x! % MOD =>  y!*x!^-1 % MOD
        vector<long long>fermatFact(n+1, 1);
        for(int i=0 ;i<=n;i++)
        {
            fermatFact[i] = power(factorial[i], MOD-2); 
        }

        long long res = Ncr(n-1, k, factorial, fermatFact); //n-1Ck

        res = (res * m) % MOD; 
        res = (res * power( m-1, n-k-1 )) %MOD;

        return res;
    }