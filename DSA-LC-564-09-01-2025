Question: Minimum window substring.

Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.
 

Follow up: Could you find an algorithm that runs in O(m + n) time?



Code: 


 string minWindow(string s, string t) {

        int n = s.size();
        int minlen=INT_MAX;

        if(t.size() > n)
         return "";

        
        unordered_map<char, int>um;
        int count=0;
        int startidx=-1;

        for(int k=0; k<t.size();k++)
         um[t[k]]++;

        int i=0,j=0;

        while(j<n)
        {
            if(um[s[j]] > 0)
                count++;
                
            um[s[j]]--;


            while(i<=j && (count == t.size()))
            {
                if(minlen > (j-i+1))
                {
                    minlen = (j-i+1);
                    startidx = i;
                }

                um[s[i]]++;

                if(um[s[i]] > 0)
                 count--;

                i++;
            }
                 
            j++;
        }
        

        if(startidx == -1)
         return "";

        return s.substr(startidx, minlen);
        
    }