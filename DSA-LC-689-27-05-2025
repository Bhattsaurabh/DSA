Question: Find K pairs with smallest sums.

You are given two integer arrays nums1 and nums2 sorted in non-decreasing order and an integer k.

Define a pair (u, v) which consists of one element from the first array and one element from the second array.

Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.

 

Example 1:

Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
Example 2:

Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [[1,1],[1,1]]
Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
 

Constraints:

1 <= nums1.length, nums2.length <= 105
-109 <= nums1[i], nums2[i] <= 109
nums1 and nums2 both are sorted in non-decreasing order.
1 <= k <= 104
k <= nums1.length * nums2.length

Code:


typedef pair<int, pair<int,int>> p;
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        
        int n1 = nums1.size();
        int n2 = nums2.size();
        priority_queue<p, vector<p>, greater<p> >pq;
        vector<vector<int>>ans;
        set<pair<int,int>>s;

        pq.push({nums1[0]+nums2[0], {0, 0} });
        s.insert({0, 0});


        while(k-- && !pq.empty())
        {
            int i = pq.top().second.first;
            int j = pq.top().second.second;
            pq.pop();

            ans.push_back({nums1[i], nums2[j]});

            // check (i, j+1) if possible
            if(j+1 < n2 && s.find({i, j+1}) == s.end())
            {
                pq.push( {nums1[i]+nums2[j+1], {i, j+1} });
                s.insert({i, j+1});
            }

            // check (i+1, j) if possible
            if(i+1 < n1 && s.find({i+1, j}) == s.end())
            {
                pq.push({nums1[i+1]+nums2[j], {i+1, j}});
                s.insert({i+1, j});
            }
               
        }

       

         return ans;


    }

