Question: Redundant Connection.

In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

 

Example 1:


Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]
Example 2:


Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
Output: [1,4]
 

Constraints:

n == edges.length
3 <= n <= 1000
edges[i].length == 2
1 <= ai < bi <= edges.length
ai != bi
There are no repeated edges.
The given graph is connected.


Code: 

int count = 0;
    int dfs(int node, int u, int v, unordered_map<int, vector<int>>& adj, vector<bool>& vis )
    {

        if(vis[node] == true)
         return 0;

        vis[node] = true;
       
        count++;
        for(auto& ngbr: adj[node])
        {
            if(node == u && ngbr == v || node == v && ngbr == u || vis[ngbr] == true)
             continue;
            dfs(ngbr, u, v, adj, vis);

        }

        return count;

    }

    vector<int> findRedundantConnection(vector<vector<int>>& edges) {

        int n = edges.size();
        vector<int>res;
        unordered_map<int, vector<int>>adj;
        for(vector<int>&v: edges)
        {
            adj[v[0]].push_back(v[1]);
            adj[v[1]].push_back(v[0]);
        }

        for(int i=n-1 ;i>=0;i--)
        {
            int u = edges[i][0];
            int v = edges[i][1];
            vector<bool>vis(n+1, false);
            int ans = dfs(1, u, v, adj, vis);
            //cout<<ans<<endl;
            if(ans== n)
             {
                res.push_back(u);
                res.push_back(v);
                break;
             }
             count=0;
        }

        return res;
        
    }