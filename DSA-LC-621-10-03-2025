Question: Count of substring containing every vowel and consonants II.

You are given a string word and a non-negative integer k.

Return the total number of substrings of word that contain every vowel ('a', 'e', 'i', 'o', and 'u') at least once and exactly k consonants.

 

Example 1:

Input: word = "aeioqq", k = 1

Output: 0

Explanation:

There is no substring with every vowel.

Example 2:

Input: word = "aeiou", k = 0

Output: 1

Explanation:

The only substring with every vowel and zero consonants is word[0..4], which is "aeiou".

Example 3:

Input: word = "ieaouqqieaouqq", k = 1

Output: 3

Explanation:

The substrings with every vowel and one consonant are:

word[0..5], which is "ieaouq".
word[6..11], which is "qieaou".
word[7..12], which is "ieaouq".
 

Constraints:

5 <= word.length <= 2 * 105
word consists only of lowercase English letters.
0 <= k <= word.length - 5


Code:



    bool isVowel(char ch)
    {
        if( ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u')
             return false;

        return true;
    }

    long long countOfSubstrings(string word, int k) {

        int  n =word.size();
        unordered_map<char, int>um;
        vector<int>nextCons(n);

        int lastconsIdx=n;
        for(int idx=n-1; idx>=0 ;idx--)
        {
            nextCons[idx] = lastconsIdx;
            if( !isVowel(word[idx]))
              lastconsIdx = idx;
        }

        int i=0,j=0;
        int cons=0;
        long long ans=0;

        while( j < n )
        {

            if(isVowel(word[j]))
            {
                um[word[j]]++;
            }
            else
             cons++;

            // shrinking window
            while(cons > k)
            {
                 if(isVowel(word[i]))
                {
                    um[word[i]]--;
                    if(um[word[i]] == 0)
                     um.erase(word[i]);
                }
                else{
                    cons--;
                }
                i++;
            }

            while(i<n && cons == k && um.size() == 5)
            {
                 ans += nextCons[j] - j;    // it tells next consonent after jth index and gives total substring from jth index
                
                // shrinking i
                 if(isVowel(word[i]))
                {
                    um[word[i]]--;
                    if(um[word[i]] == 0)
                     um.erase(word[i]);
                }
                else{
                    cons--;
                }
                i++;


            }
               


            j++;

        }

        return ans;
        
    }