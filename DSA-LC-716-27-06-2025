Question: Longest subsequence repeated K times.

You are given a string s of length n, and an integer k. You are tasked to find the longest subsequence repeated k times in string s.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

A subsequence seq is repeated k times in the string s if seq * k is a subsequence of s, where seq * k represents a string constructed by concatenating seq k times.

For example, "bba" is repeated 2 times in the string "bababcba", because the string "bbabba", constructed by concatenating "bba" 2 times, is a subsequence of the string "bababcba".
Return the longest subsequence repeated k times in string s. If multiple such subsequences are found, return the lexicographically largest one. If there is no such subsequence, return an empty string.

 

Example 1:

example 1
Input: s = "letsleetcode", k = 2
Output: "let"
Explanation: There are two longest subsequences repeated 2 times: "let" and "ete".
"let" is the lexicographically largest one.
Example 2:

Input: s = "bb", k = 2
Output: "b"
Explanation: The longest subsequence repeated 2 times is "b".
Example 3:

Input: s = "ab", k = 2
Output: ""
Explanation: There is no subsequence repeated 2 times. Empty string is returned.
 

Constraints:

n == s.length
2 <= n, k <= 2000
2 <= n < k * 8
s consists of lowercase English letters.


Code:


 string res = "";

    bool isSubsequence(string &s1, string& s2, int k)
    {
        int n1 = s1.size();
        int n2 = s2.size();

        int i=0, j=0;

        while(i < n1 && j < n2*k)
        {
            if(s1[i] == s2[j%n2])
            {
                j++;
            }
            i++;  
        }

        if(j == n2*k)
         return true;

        return false;
    }

    bool backTracking(string& s, string& curr, int k,  vector<bool>&canUse, int maxLen,  vector<int> &maxUseFreq)
    {
        if(curr.length() == maxLen)
        {
            if(isSubsequence(s, curr, k))
             {
                res = curr;
                return true;
             }

             return false;
        }

        for(int i=25 ;i>=0 ;i--)
        {
            if(canUse[i] == false || maxUseFreq[i] == 0)
               continue;

            // Do
            char ch = i + 'a';
            curr.push_back(ch);
            maxUseFreq[i]--;

            // explore
            if(backTracking(s, curr, k, canUse, maxLen, maxUseFreq) == true)
              return true;
            
            // Undo
            curr.pop_back();
            maxUseFreq[i]++;
        }

         return false;

    }

    string longestSubsequenceRepeatedK(string s, int k) {

        int n = s.size();

        vector<int>freq(26, 0);
        
        for(int i=0; i<n ;i++)
        {
            freq[s[i] - 'a']++;
        }

        vector<bool>canUse(26, false);
        vector<int>maxUseFreq(26, 0);

        for(int i=0 ;i<26; i++)
        {
            if(freq[i] >= k)
            {
              canUse[i] = true;
              maxUseFreq[i] = freq[i]/k;      // at most this can be used in a subsequence
            }
            
        }

        int maxLen = n/k;
        string curr = "";
        for(int len=maxLen ;len>=0 ;len--)
        {
            if(backTracking( s, curr, k, canUse, len, maxUseFreq) == true)
              return res;
        }
        return res;
        
    }