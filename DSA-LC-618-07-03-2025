Question: Closest Prime numbers in range.

Given two positive integers left and right, find the two integers num1 and num2 such that:

left <= num1 < num2 <= right .
Both num1 and num2 are prime numbers.
num2 - num1 is the minimum amongst all other pairs satisfying the above conditions.
Return the positive integer array ans = [num1, num2]. If there are multiple pairs satisfying these conditions, return the one with the smallest num1 value. If no such numbers exist, return [-1, -1].

 

Example 1:

Input: left = 10, right = 19
Output: [11,13]
Explanation: The prime numbers between 10 and 19 are 11, 13, 17, and 19.
The closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].
Since 11 is smaller than 17, we return the first pair.
Example 2:

Input: left = 4, right = 6
Output: [-1,-1]
Explanation: There exists only one prime number in the given range, so the conditions cannot be satisfied.
 

Constraints:

1 <= left <= right <= 10^6


Code:


    bool checkPrime(int num){

        if(num == 1)
         return false;

        for(int i=2 ;i*i<=num ;i++)
        {
            if(num%i == 0)
             return false;
        }

        return true;

    }

    vector<int> closestPrimes(int left, int right) {

        vector<int>res;
        vector<int>prime;

        int num1=0, num2=0;
        int diff = INT_MAX;

        for(int i=left; i<=right; i++)
        {
            if(i%2 != 0 && checkPrime(i) || i == 2)
            {
                prime.push_back(i);
                int n = prime.size();
                if(n >= 2 && diff > (prime[n-1]-prime[n-2]) )
                {
                    diff = prime[n-1]-prime[n-2];
                    num1 = prime[n-2];
                    num2 = prime[n-1];
                }
            }
        }

       
        if(num1 == 0 && num2 ==0)
        {
            res.push_back(-1);
            res.push_back(-1);
        }
        else{
             res.push_back(num1);
             res.push_back(num2);
        }

        return res;
        
    }

