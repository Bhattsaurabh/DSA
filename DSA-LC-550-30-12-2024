Question: Longest increasing Path in a Matrix.

Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

 

Example 1:


Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:


Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
Example 3:

Input: matrix = [[1]]
Output: 1
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 200
0 <= matrix[i][j] <= 2^31 - 1

Code:


    int solve(int i, int j, vector<vector<int>>& matrix,  vector<vector<int>> &dp)
    {
        int m = matrix.size();
        int n = matrix[0].size();

        if(i<0 || i>=m || j<0 || j>=n)
         return 0;
        
        if(dp[i][j] != -1)
         return dp[i][j];

        int left= 0;
        int right= 0;
        int up= 0;
        int down= 0;

        if(j-1 >= 0 && matrix[i][j-1] > matrix[i][j])
         left = 1 + solve(i, j-1, matrix, dp);

        if(i-1 >= 0 && matrix[i-1][j] > matrix[i][j])
         up = 1 + solve(i-1, j, matrix, dp);

        if(j+1 < n && matrix[i][j+1] > matrix[i][j])
         right = 1 + solve(i, j+1, matrix, dp);

        if(i+1 < m && matrix[i+1][j] > matrix[i][j])
         down = 1 + solve(i+1, j, matrix, dp);

        return dp[i][j] =  max({left, right, up, down});
        
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {

        int ans=0;
        int m = matrix.size();
        int n = matrix[0].size();

        vector<vector<int>>dp(m, vector<int>(n, -1));

        for(int i=0 ;i<m ;i++)
        {
            for(int j=0 ;j<n;j++)
            {
               ans = max(ans,(1+solve(i,j, matrix, dp)) );
            }
        }

        return ans;
        
    }