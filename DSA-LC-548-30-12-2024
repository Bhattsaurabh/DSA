Question: Longest Common Subsequence (LCS).

Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.


Code:


    int solve(int idx1, int idx2, string text1, string text2,vector<vector<int>> &dp)
    {
        if(idx1 < 0 || idx2 < 0)
            return 0;
        
        if(dp[idx1][idx2] != -1)
         return dp[idx1][idx2];
         
        if(text1[idx1] == text2[idx2])
         return dp[idx1][idx2] =  1 + solve(idx1-1, idx2-1, text1, text2, dp); // match huye

        // match nhi huye 2 possibilities h ek br ek ko reduce kro agli br dusre ko
        return dp[idx1][idx2] =  0 + max(solve(idx1, idx2-1, text1, text2, dp), solve(idx1-1, idx2, text1, text2, dp) );

    }

    int tabulation(string text1, string text2)
    {
        int n = text1.size();
        int m = text2.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));

        for(int i=0 ;i<=n ;i++)
         dp[i][0] = 0;
        for(int j=0 ;j<=m ;j++)
         dp[0][j] = 0;

        // index shifting -1 => 0

        for(int i=1 ;i<n+1;i++)
        {
            for(int j=1 ;j<m+1;j++)
            {
                if(text1[i-1] == text2[j-1])
                 dp[i][j] = 1 + dp[i-1][j-1];
                else
                 dp[i][j] =  0 + max(dp[i][j-1], dp[i-1][j]);
            }
        }

        return dp[n][m];
    }

    int longestCommonSubsequence(string text1, string text2) {

        int n1 = text1.size();
        int n2 = text2.size();
        
        if(text1 == text2)
         return n1;

        return tabulation(text1, text2);

        // vector<vector<int>> dp(n1, vector<int>(n2, -1));

        // return solve(n1-1,n2-1, text1, text2, dp);
        
    }