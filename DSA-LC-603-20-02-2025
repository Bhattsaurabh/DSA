Question: Find unique binary string.

Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.

 

Example 1:

Input: nums = ["01","10"]
Output: "11"
Explanation: "11" does not appear in nums. "00" would also be correct.
Example 2:

Input: nums = ["00","01"]
Output: "11"
Explanation: "11" does not appear in nums. "10" would also be correct.
Example 3:

Input: nums = ["111","011","001"]
Output: "101"
Explanation: "101" does not appear in nums. "000", "010", "100", and "110" would also be correct.
 

Constraints:

n == nums.length
1 <= n <= 16
nums[i].length == n
nums[i] is either '0' or '1'.
All the strings of nums are unique.

Code:

 string res="";
    bool  solve(string str, int n ,  unordered_map<string, int>&um)
    {
        if(str.size() >= n)
        {
            if(um.find(str) == um.end())
             {
                res = str;
                return true;
             }
            return false;
        }

        if(solve(str+'0', n, um))
          return true;

        if(solve(str+'1', n, um))
          return true;

        return false;
    }

    string findDifferentBinaryString(vector<string>& nums) {

        int n = nums.size();
        unordered_map<string, int>um;

        for(auto x: nums)
         um[x]++;


        solve("", n, um);
        return res;
        
    }