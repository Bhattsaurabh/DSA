Question: Construct the Lexicographically largest valid sequence.

Given an integer n, find a sequence that satisfies all of the following:

The integer 1 occurs once in the sequence.
Each integer between 2 and n occurs twice in the sequence.
For every integer i between 2 and n, the distance between the two occurrences of i is exactly i.
The distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|.

Return the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution.

A sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.

 

Example 1:

Input: n = 3
Output: [3,1,2,3,2]
Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.
Example 2:

Input: n = 5
Output: [5,3,1,4,3,5,2,4,2]
 

Constraints:

1 <= n <= 20


Code:


    bool solve(int idx, vector<int>&res, int n,  unordered_map<int,int>&um)
    {
        if(idx >= res.size())
          return true;

        if(res[idx] != -1)
         return solve(idx+1, res, n, um);

         for(int i=n; i>=1 ;i--)
         {
            if(um[i] == 1) 
                continue;

            um[i] = 1;
            res[idx] = i;

            if(i==1)
            {
                if(solve(idx+1, res, n, um))
                 return true;
            }
            else{

                int j = idx+i;
                if(j<res.size() && res[j] == -1)
                {
                    res[j] = i;
                    if(solve(idx+1, res, n, um))
                      return true;
                    
                    res[j] = -1;
                }
            }

            um[i] = 0;
            res[idx] = -1;

         }

        return false;
    }

    vector<int> constructDistancedSequence(int n) {

        vector<int>res(2*n-1, -1);
        unordered_map<int,int>um;
        for(int i=1;i<=n;i++)
          um[i] = 0;

        solve(0, res, n, um);

        return res;
        
    }