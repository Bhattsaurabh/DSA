Question: Apply operations to maximize score.

You are given an array nums of n positive integers and an integer k.

Initially, you start with a score of 1. You have to maximize your score by applying the following operation at most k times:

Choose any non-empty subarray nums[l, ..., r] that you haven't chosen previously.
Choose an element x of nums[l, ..., r] with the highest prime score. If multiple such elements exist, choose the one with the smallest index.
Multiply your score by x.
Here, nums[l, ..., r] denotes the subarray of nums starting at index l and ending at the index r, both ends being inclusive.

The prime score of an integer x is equal to the number of distinct prime factors of x. For example, the prime score of 300 is 3 since 300 = 2 * 2 * 3 * 5 * 5.

Return the maximum possible score after applying at most k operations.

Since the answer may be large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [8,3,9,3,8], k = 2
Output: 81
Explanation: To get a score of 81, we can apply the following operations:
- Choose subarray nums[2, ..., 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9.
- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81.
It can be proven that 81 is the highest score one can obtain.
Example 2:

Input: nums = [19,12,14,6,10,18], k = 3
Output: 4788
Explanation: To get a score of 4788, we can apply the following operations: 
- Choose subarray nums[0, ..., 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19.
- Choose subarray nums[5, ..., 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342.
- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788.
It can be proven that 4788 is the highest score one can obtain.
 

Constraints:

1 <= nums.length == n <= 10^5
1 <= nums[i] <= 10^5
1 <= k <= min(n * (n + 1) / 2, 10^9)


Code:



 const int MOD = 1e9+7;
    int n;
    long long findPower(long long a, long long b)
    {
        if( b == 0)
          return 1;

        long long half = findPower(a, b/2);
        long long res = (half * half) % MOD;

        if(b%2 == 1)
        {
            res = (res * a)% MOD;
        }

        return res; 
    }

    vector<int> getPrimes(int limit)
    {
        vector<bool>isPrime(limit+1, true);
        vector<int>primes;

        for(int i=2 ; i*i <= limit ;i++)
        {
            if(isPrime[i])
            {
                for(int j = i * i; j <= limit; j += i)
                {
                    isPrime[j] = false;
                }
            }
        }

        for(int i=2 ;i<=limit ;i++)
        {
            if(isPrime[i])
             primes.push_back(i);
        }

        return primes;

    }

    vector<int> findPrimeScore(vector<int> &nums)
    {
        vector<int>PrimeScore(n, 0);

        int maxElement = *max_element(nums.begin(), nums.end());

        vector<int>primes = getPrimes(maxElement);


        for(int i=0 ;i<n;i++)
        {
            int num = nums[i];

            for(int prime : primes)
            {
                if(prime*prime > num)
                 break;

                if(num % prime != 0)
                 continue;

                PrimeScore[i]++;

                while(num % prime == 0)
                {
                    num = num/prime;
                }
            }

            if(num > 1)     // example: 15
             PrimeScore[i]++;


        }

        return PrimeScore;


    }

    vector<int> findNextGreater(vector<int> &PrimeScore)
    {
        vector<int>NextGreater(n);
        stack<int>st;

        for(int i=n-1 ;i>=0; i--)
        {

            while(!st.empty() && PrimeScore[st.top()] <= PrimeScore[i])
            {
                st.pop();
            }
            
            NextGreater[i] = st.empty() ? n : st.top();
            st.push(i);

        }
        return NextGreater;
    }

    vector<int> findPrevGreaterOrEqual(vector<int> &PrimeScore)
    {
        vector<int>PrevGreaterOrEqual(n, -1);
        stack<int>st;


        for(int i=0 ;i<n;i++)
        {
            while(!st.empty() && PrimeScore[st.top()] < PrimeScore[i])
            {
                st.pop();
            }

            PrevGreaterOrEqual[i]  =  st.empty() ? -1 : st.top();
            st.push(i);

        }

        return PrevGreaterOrEqual;


    }

    int maximumScore(vector<int>& nums, int k) {

        n = nums.size();

        vector<int>PrimeScore = findPrimeScore(nums);
        vector<int>NextGreater = findNextGreater(PrimeScore);
        vector<int>PrevGreaterOrEqual = findPrevGreaterOrEqual(PrimeScore);

       
        vector<long long>subArrays(n, 0);

        for(int i=0 ;i<n;i++)
        {
            subArrays[i] = (long long) (NextGreater[i]-i) * (i - PrevGreaterOrEqual[i]);
        }

        vector<pair<int,int>>sortedNums;
        for(int i=0 ;i<n;i++)
        {
            sortedNums.push_back({nums[i], i});
        }
        sort(begin(sortedNums), end(sortedNums), greater<>());  //sort descending

        long long score =1;
        int idx = 0;        // start from largest element greedily

        while(k>0)
        {
            auto [num , i] = sortedNums[idx];

            long long operations = min( (long long) k,  subArrays[i]);

            score =  (score * findPower(num, operations)) % MOD;

            k = (k - operations);
            idx++; 

        }

        return score;

        
    }