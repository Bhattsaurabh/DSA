Question: Divide nodes into the maximum number of groups.


You are given a positive integer n representing the number of nodes in an undirected graph. The nodes are labeled from 1 to n.

You are also given a 2D integer array edges, where edges[i] = [ai, bi] indicates that there is a bidirectional edge between nodes ai and bi. Notice that the given graph may be disconnected.

Divide the nodes of the graph into m groups (1-indexed) such that:

Each node in the graph belongs to exactly one group.
For every pair of nodes in the graph that are connected by an edge [ai, bi], if ai belongs to the group with index x, and bi belongs to the group with index y, then |y - x| = 1.
Return the maximum number of groups (i.e., maximum m) into which you can divide the nodes. Return -1 if it is impossible to group the nodes with the given conditions.

 

Example 1:


Input: n = 6, edges = [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]
Output: 4
Explanation: As shown in the image we:
- Add node 5 to the first group.
- Add node 1 to the second group.
- Add nodes 2 and 4 to the third group.
- Add nodes 3 and 6 to the fourth group.
We can see that every edge is satisfied.
It can be shown that that if we create a fifth group and move any node from the third or fourth group to it, at least on of the edges will not be satisfied.
Example 2:

Input: n = 3, edges = [[1,2],[2,3],[3,1]]
Output: -1
Explanation: If we add node 1 to the first group, node 2 to the second group, and node 3 to the third group to satisfy the first two edges, we can see that the third edge will not be satisfied.
It can be shown that no grouping is possible.
 

Constraints:

1 <= n <= 500
1 <= edges.length <= 104
edges[i].length == 2
1 <= ai, bi <= n
ai != bi
There is at most one edge between any pair of vertices.


Code:


   
    bool checkCycleLengthOdd(int node, unordered_map<int, vector<int>>&adj, vector<int>&col) 
    {
        // bipartite graph approach
        queue<int>q;
        col[node] = 0;

        q.push(node);

        while(!q.empty())
        {
            int currnode = q.front();
            q.pop();

            for(auto& ngbr: adj[currnode])
            {
                if(col[ngbr] == -1)
                {
                    col[ngbr] = !col[currnode];
                    q.push(ngbr);
                }
                else if(col[ngbr] == col[currnode])
                 return true;           //odd length cycle
            }
        }

        return false;


    }

    int bfs(int n, int node,  unordered_map<int, vector<int>>&adj)
    {
        vector<int>vis(n+1,0 );
        queue<int>q;
        q.push(node);
        vis[node] = 1;
        int count=0;

        while(!q.empty())
        {
            int size = q.size();

            for(int i=0 ;i<size;i++)
            {
                int curr = q.front();
                q.pop();

                for(auto& ngbr: adj[curr])
                {
                    if(vis[ngbr] == 0)
                    {
                        vis[ngbr] = 1;
                         q.push(ngbr);
                    }
                   
                }
            }

            count++;
        }

        return count;

    }

    int getMaxGroupofComponent(int node, unordered_map<int, vector<int>>&adj, vector<int>&vis, vector<int>&dist)
    {
        if(vis[node] == 1)
         return dist[node];

        vis[node] = 1;
        int maxi = dist[node];

        for(auto& ngbr: adj[node])
        {
            maxi = max(maxi, getMaxGroupofComponent(ngbr, adj, vis, dist));
        }

        return maxi;
    }

    int magnificentSets(int n, vector<vector<int>>& edges) {

        unordered_map<int, vector<int>>adj;
       
        for(vector<int>&vec: edges)
        {
            int u=vec[0];
            int v=vec[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

     // jis graph m cycle odd length ki h usme groups ni bn payenge given condition k hisab se
         vector<int>col(n+1, -1);
        for(int i=1;i<=n;i++)
        {
            if(checkCycleLengthOdd(1, adj, col) == true)
            return -1;
        }
        
        vector<int>dist(n+1, 0);
        for(int i=1;i<=n;i++)
        {
            dist[i] = bfs(n, i, adj);
        }

        vector<int>visited(n+1, 0);

        int maxi=0;
        for(int i=1 ;i<=n;i++)
        {
            if(visited[i] == 0)
            {
                maxi += getMaxGroupofComponent(i, adj, visited, dist);
            }
        }

        return maxi;

        
    }