Question: Painting a Grid with three different Colors.

You are given two integers m and n. Consider an m x n grid where each cell is initially white. You can paint each cell red, green, or blue. All cells must be painted.

Return the number of ways to color the grid with no two adjacent cells having the same color. Since the answer can be very large, return it modulo 109 + 7.

 

Example 1:


Input: m = 1, n = 1
Output: 3
Explanation: The three possible colorings are shown in the image above.
Example 2:


Input: m = 1, n = 2
Output: 6
Explanation: The six possible colorings are shown in the image above.
Example 3:

Input: m = 5, n = 5
Output: 580986
 

Constraints:

1 <= m <= 5
1 <= n <= 1000


Code:

 int MOD = 1e9+7;
    vector<string>columnStates;

    void generateColumnStates(string str, int l, char prevChar, int m)
    {
        if( l == m)
        {
            columnStates.push_back(str);
            return;
        }

        for(auto ch : {'R','G','B'})
        {
            if(ch != prevChar){
                generateColumnStates(str+ch, l+1, ch, m);
            }
        }
    }

    int solve(int prevIdx, int remainState, int m,  vector<vector<int>>&dp)
    {
        if(remainState == 0)
         return 1;

         if(dp[prevIdx][remainState] != -1)
          return dp[prevIdx][remainState];

        int ways=0;
        string prevState = columnStates[prevIdx];


        for(int i=0 ;i<columnStates.size();i++)
        {
            if(i == prevIdx) continue;

            string currState = columnStates[i];
            bool valid = true;

            for(int j=0 ;j<m;j++)
            {
                if(currState[j] == prevState[j])
                {
                    valid = false;
                    break;
                }
            }

            if(valid)
            {
                ways =  (ways + solve(i, remainState-1, m, dp)) %MOD;
            }
        }

        return dp[prevIdx][remainState] = ways;
    }

    int colorTheGrid(int m, int n) {
      
      
      generateColumnStates( "", 0, '#', m);
      int res=0;

      vector<vector<int>>dp(columnStates.size()+1, vector<int>(n, -1));
      for(int i=0 ;i<columnStates.size() ;i++)
      {
         res = (res+solve(i, n-1, m, dp)) % MOD;
      }

      return res;

    }