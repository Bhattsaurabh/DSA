Question: Sum of k-mirror numbers.

A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.

For example, 9 is a 2-mirror number. The representation of 9 in base-10 and base-2 are 9 and 1001 respectively, which read the same both forward and backward.
On the contrary, 4 is not a 2-mirror number. The representation of 4 in base-2 is 100, which does not read the same both forward and backward.
Given the base k and the number n, return the sum of the n smallest k-mirror numbers.

 

Example 1:

Input: k = 2, n = 5
Output: 25
Explanation:
The 5 smallest 2-mirror numbers and their representations in base-2 are listed as follows:
  base-10    base-2
    1          1
    3          11
    5          101
    7          111
    9          1001
Their sum = 1 + 3 + 5 + 7 + 9 = 25. 
Example 2:

Input: k = 3, n = 7
Output: 499
Explanation:
The 7 smallest 3-mirror numbers are and their representations in base-3 are listed as follows:
  base-10    base-3
    1          1
    2          2
    4          11
    8          22
    121        11111
    151        12121
    212        21212
Their sum = 1 + 2 + 4 + 8 + 121 + 151 + 212 = 499.
Example 3:

Input: k = 7, n = 17
Output: 20379000
Explanation: The 17 smallest 7-mirror numbers are:
1, 2, 3, 4, 5, 6, 8, 121, 171, 242, 292, 16561, 65656, 2137312, 4602064, 6597956, 6958596
 

Constraints:

2 <= k <= 9
1 <= n <= 30

Code:

 bool checkPal(string s)
    {
        string str = s;
        reverse(begin(str), end(str));
        return str == s;
    }

    string convertToBaseK(long long num, int k)
    {
        if(num == 0)
         return "0";

        string str="";
        while(num)
        {
            int rem = num%k; 
           
            str += to_string(rem);
            num = num/k;
        }

        return str;
    }

    long long kMirror(int k, int n) {

        long long L=1;
        long long ans=0;
        int count=0;

        // approach :first generating palindrome number then check K-basePal 

        while(n > 0)
        {
            int halfLength = (L+1)/2;

            long long min_num = pow(10, halfLength-1);
            long long max_num = pow(10, halfLength) - 1;

            for(int num=min_num ;num<=max_num ;num++)
            {
                string firstHalf = to_string(num);
                string secondHalf = firstHalf;
                reverse(begin(secondHalf), end(secondHalf));

                string palStr="";
                if(L%2 == 0)        // even Length Palindrome
                {
                    palStr = firstHalf + secondHalf;
                }
                else{       // odd length Palindrome
                    palStr = firstHalf + secondHalf.substr(1);
                }

                long long palNum = stoll(palStr);
                string Kform = convertToBaseK(palNum, k);

                if(checkPal(Kform))
                {
                    ans += palNum;
                    n--;
                }

                if(n == 0)
                   break;

            }
            L++;

        }

        return ans;
        
    }