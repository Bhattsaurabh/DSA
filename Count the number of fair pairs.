Question: Count the number of fair pairs.

Given a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs.

A pair (i, j) is fair if:

0 <= i < j < n, and
lower <= nums[i] + nums[j] <= upper
 

Example 1:

Input: nums = [0,1,7,4,4,5], lower = 3, upper = 6
Output: 6
Explanation: There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5).
Example 2:

Input: nums = [1,7,9,2,5], lower = 11, upper = 11
Output: 1
Explanation: There is a single fair pair: (2,3).
 

Constraints:

1 <= nums.length <= 10^5
nums.length == n
-109 <= nums[i] <= 10^9
-109 <= lower <= upper <= 10^9



Code:



    long long countFairPairs(vector<int>& nums, int lower, int upper) {

        // APPROACH: X = COUNT OF PAIRS HAVING SUM < LOWER
        //           Y = COUNT OF PAIRS HAVING SUM <= UPPER
        // COUNT OF PAIRS HAVING LOWER<= SUM <= UPPER   Z = Y-X


        int n=nums.size();
        long long count = 0;
        sort(begin(nums), end(nums));
        
        for(int i=0 ;i<n;i++)
        {

            int idx = lower_bound(nums.begin()+i+1, nums.end(), lower - nums[i]) - nums.begin();
            int X = idx - i -1;
            int idx1 = upper_bound(nums.begin()+i+1, nums.end(), upper - nums[i]) - nums.begin();
            int Y = idx1 - 1 - i;

            cout<<X<<"-"<<Y<<endl;
            count += (Y - X);
        }


        return count;

        

        
    }
