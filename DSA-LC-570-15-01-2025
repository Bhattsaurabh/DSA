Question: Minimize Xor

Given two positive integers num1 and num2, find the positive integer x such that:

x has the same number of set bits as num2, and
The value x XOR num1 is minimal.
Note that XOR is the bitwise XOR operation.

Return the integer x. The test cases are generated such that x is uniquely determined.

The number of set bits of an integer is the number of 1's in its binary representation.

 

Example 1:

Input: num1 = 3, num2 = 5
Output: 3
Explanation:
The binary representations of num1 and num2 are 0011 and 0101, respectively.
The integer 3 has the same number of set bits as num2, and the value 3 XOR 3 = 0 is minimal.
Example 2:

Input: num1 = 1, num2 = 12
Output: 3
Explanation:
The binary representations of num1 and num2 are 0001 and 1100, respectively.
The integer 3 has the same number of set bits as num2, and the value 3 XOR 1 = 2 is minimal.
 

Constraints:

1 <= num1, num2 <= 10^9

Code:


    int countSetbits(int n)
    {
        int count=0;
        while(n)
        {
            count += n & 1;
            n >>= 1;
        }
        return count;
    }

    int isSet(int n, int bit)
    {
       if(  (n & 1<<bit) != 0) 
        return 1;

        return 0;   
    }

    void setBit(int& n, int bit)
    {
        n = n | 1<<bit;
    }

    void unsetBit(int& n, int bit)
    {
        n = n & ~1<<bit;
    }

    int minimizeXor(int num1, int num2) {

        int miniXor=INT_MAX;
        int ans=INT_MAX;
        int x = num1;

        int setBitsofnum2 = countSetbits(num2);
        int setBitsofX = countSetbits(x);

        int bit = 0;
        if(setBitsofX < setBitsofnum2)
        {
            while(setBitsofX < setBitsofnum2)
            {
                 if(!isSet(x, bit))
                 {
                  setBit(x, bit);
                  setBitsofX++;
                 }
                bit++;
            }

        }else if(setBitsofX > setBitsofnum2)
        {
            while(setBitsofX > setBitsofnum2)
            {
                 if(isSet(x, bit))
                 {
                     unsetBit(x, bit);
                     setBitsofX--;
                 }
                 
                bit++;
            }
        }
        else
         return num1;
        
        
        return x;

    }