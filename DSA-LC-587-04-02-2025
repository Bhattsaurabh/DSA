Question: Making a Large Island.

You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.

Return the size of the largest island in grid after applying this operation.

An island is a 4-directionally connected group of 1s.

 

Example 1:

Input: grid = [[1,0],[0,1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.
Example 2:

Input: grid = [[1,1],[1,0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.
Example 3:

Input: grid = [[1,1],[1,1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 500
grid[i][j] is either 0 or 1.


code:

 
    int dfs(int i, int j, vector<vector<int>>& grid, vector<vector<int>> &vis, int id)
    {
        int n = grid.size();

        if(i<0 || i>=n || j<0 || j>=n || vis[i][j] == 1 || grid[i][j] == 0)
          return 0;
        
        vis[i][j] = 1;
        int left = dfs(i, j-1, grid, vis, id);
        int right = dfs(i, j+1, grid, vis, id);
        int top = dfs(i-1, j, grid, vis, id);
        int down = dfs(i+1, j, grid, vis, id);

        grid[i][j] = id;
        return 1 + left + right + down + top;

    }

    int largestIsland(vector<vector<int>>& grid) {

        int n=grid.size();
        int res = 0;
        unordered_map<int, int>um;
        int id=2;
        vector<vector<int>>vis(n, vector<int>(n, 0));
         for(int i=0 ;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
               
                if(grid[i][j] == 1 && vis[i][j] == 0)
                {

                    int maxarea = 0;
                    maxarea = max(maxarea, dfs(i, j, grid, vis, id));
                    um[id]=maxarea;
                    res = max(res, maxarea);
                    id++;
                }
                
            }
        }


        for(int i=0 ;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
               
                if(grid[i][j] == 0)
                {
                    unordered_set<int>s;

                    if(i-1>=0)
                     s.insert(grid[i-1][j]);
                    if(i+1<n)
                     s.insert(grid[i+1][j]);
                    if(j-1>=0)
                     s.insert(grid[i][j-1]);
                    if(j+1<n)
                     s.insert(grid[i][j+1]);
                    
                    int maxarea = 0;
                    for(auto x: s)
                    {
                        maxarea += um[x];
                    }
                    maxarea += 1;
                
                    res = max(res, maxarea);
                }
                
            }
        }

        return res == 0 ? n*n : res;
        
    }