Question:  Find largest value in each tree row.

Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).

 

Example 1:


Input: root = [1,3,2,5,3,null,9]
Output: [1,3,9]
Example 2:

Input: root = [1,2,3]
Output: [1,3]
 

Constraints:

The number of nodes in the tree will be in the range [0, 104].
-231 <= Node.val <= 231 - 1

Code:

void bfs(TreeNode* root,  vector<int>&maxValEachLevel)
    {
        if(root == NULL)
         return;

         queue<TreeNode*>q;
         q.push(root);

         while(!q.empty())
         {
            int n = q.size();
            int maxi=INT_MIN;

            while(n--)
            {
                TreeNode* curr = q.front();
                q.pop();

                maxi = max(maxi, curr->val);

                if(curr->left)
                 q.push(curr->left);
                if(curr->right)
                 q.push(curr->right);
            }
            maxValEachLevel.push_back(maxi);
         }
    }

    vector<int> largestValues(TreeNode* root) {

        vector<int>maxValEachLevel;
        bfs(root, maxValEachLevel);
        return maxValEachLevel;
    }
